import boto3
import json
import datetime
from botocore.exceptions import ClientError

def lambda_handler(event, context):
    s3_client = boto3.client('s3')
    ses_client = boto3.client('ses')
    
    bucket_name = 'your-s3-bucket'
    file_name = 'event_logs.json'
    
    try:
        logs_object = s3_client.get_object(Bucket=bucket_name, Key=file_name)
        logs_data = json.loads(logs_object['Body'].read())
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchKey':
            logs_data = []
        else:
            raise
    
    # Calculate the timestamp 24 hours ago
    twenty_four_hours_ago = (datetime.datetime.now() - datetime.timedelta(hours=24)).timestamp()
    
    reminder_message = "You have created an invalid OIDC provider more than 24 hours ago. Please delete it as soon as possible."
    
    for log_event in logs_data:
        if log_event['eventTime'] < twenty_four_hours_ago:
            # Send a reminder email to the team lead
            team_lead_email = get_team_lead_email(log_event['account'])
            
            response = ses_client.send_email(
                Source='your-sender-email@example.com',
                Destination={'ToAddresses': [team_lead_email]},
                Message={
                    'Subject': {'Data': 'Reminder: Delete Invalid OIDC Provider'},
                    'Body': {'Text': {'Data': reminder_message}}
                }
            )
            
    return {
        'statusCode': 200,
        'body': json.dumps('Reminder emails sent')
    }

def get_team_lead_email(account_id):
    # Similar to the function in the first Lambda to get team lead's email
    # Call the necessary API to get the team lead's email based on the account ID
    # Return the team lead's email
    pass  # Implement your logic here
