# Define the AWS provider
provider "aws" {
  region = "us-east-1"  # Change to your desired region
}

# Create an IAM policy document for Lambda execution
data "aws_iam_policy_document" "lambda_execution" {
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

# Create an IAM role for the Create OIDC Lambda function
resource "aws_iam_role" "create_oidc_role" {
  name = "create_oidc_role"
  
  assume_role_policy = data.aws_iam_policy_document.lambda_execution.json
}

# Create an IAM role for the Scheduled Checker Lambda function
resource "aws_iam_role" "scheduled_checker_role" {
  name = "scheduled_checker_role"
  
  assume_role_policy = data.aws_iam_policy_document.lambda_execution.json
}

# Create a DynamoDB table to store OIDC event data
resource "aws_dynamodb_table" "oidc_events" {
  name           = "oidc_events"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "EventID"
  attribute {
    name = "EventID"
    type = "S"
  }
  # Add more table attributes as needed
}

# Create a Lambda function for creating and logging OIDC providers
resource "aws_lambda_function" "create_oidc_lambda" {
  filename      = "path/to/your/package.zip"
  function_name = "create_oidc_function"
  role          = aws_iam_role.create_oidc_role.arn
  handler       = "your-create-handler-function"
  runtime       = "python3.8"  # Use the appropriate runtime

  environment {
    variables = {
      TEAM_LEAD_EMAIL = "teamlead@example.com"
      DYNAMODB_TABLE  = aws_dynamodb_table.oidc_events.name
      # Add more environment variables
    }
  }
}

# Create a Lambda function for the Scheduled Checker
resource "aws_lambda_function" "scheduled_checker_lambda" {
  filename      = "path/to/your/package.zip"
  function_name = "scheduled_checker_function"
  role          = aws_iam_role.scheduled_checker_role.arn
  handler       = "your-scheduled-checker-handler-function"
  runtime       = "python3.8"  # Use the appropriate runtime

  environment {
    variables = {
      TEAM_LEAD_EMAIL = "teamlead@example.com"
      DYNAMODB_TABLE  = aws_dynamodb_table.oidc_events.name
      # Add more environment variables
    }
  }
}

# Define CloudWatch Events rules to trigger the Lambda functions
resource "aws_cloudwatch_event_rule" "create_oidc_event_rule" {
  name        = "create_oidc_rule"
  description = "Trigger Create OIDC Lambda"
  event_pattern = <<PATTERN
{
  "source": ["aws.iam"],
  "detail": {
    "eventName": ["CreateOpenIDConnectProvider"]
  }
}
PATTERN
}

resource "aws_cloudwatch_event_rule" "scheduled_checker_event_rule" {
  name        = "scheduled_checker_rule"
  description = "Trigger Scheduled Checker Lambda"
  schedule_expression = "rate(1 hour)"  # Adjust the schedule as needed
}

# Connect the CloudWatch Events rules to the Lambda functions
resource "aws_cloudwatch_event_target" "create_oidc_target" {
  rule      = aws_cloudwatch_event_rule.create_oidc_event_rule.name
  target_id = "create_oidc_target"
  arn       = aws_lambda_function.create_oidc_lambda.arn
}

resource "aws_cloudwatch_event_target" "scheduled_checker_target" {
  rule      = aws_cloudwatch_event_rule.scheduled_checker_event_rule.name
  target_id = "scheduled_checker_target"
  arn       = aws_lambda_function.scheduled_checker_lambda.arn
}

# Define SES receipt rule for email handling
resource "aws_ses_receipt_rule" "oidc_validation_rule" {
  name = "oidc_validation_rule"
  rule_set_name = "your-rule-set"
  recipients = ["example@example.com"]
  enabled = true
  actions {
    s3_action {
      bucket_name = "your-s3-bucket"
      object_key_prefix = "emails/"
      topic_arn = "arn:aws:sns:us-east-1:123456789012:ExampleTopic"
    }
  }
}




resource "aws_cloudwatch_event_rule" "oidc_provider_events" {
  name        = "OIDCProviderEventsRule"
  description = "Rule for OIDC Provider events"

  event_pattern = jsonencode({
    "source": ["aws.iam"],
    "detail": {
      "eventName": ["CreateOpenIDConnectProvider", "UpdateOpenIDConnectProviderThumbprint"]
    }
  })
}



resource "aws_cloudwatch_event_target" "invoke_lambda" {
  rule = aws_cloudwatch_event_rule.oidc_provider_events.name
  target_id = "invokeLambdaTarget"
  arn = aws_lambda_function.your_lambda_function.arn
}



resource "aws_lambda_permission" "allow_cloudwatch" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.your_lambda_function.function_name
  principal     = "events.amazonaws.com"
}
