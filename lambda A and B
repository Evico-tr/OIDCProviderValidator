import boto3
import json
import logging
import os

# Initialize AWS SDK clients
iam_client = boto3.client('iam')
s3_client = boto3.client('s3')
ses_client = boto3.client('ses')

# Set the S3 bucket and prefix for event logging
s3_bucket = os.environ.get('S3_BUCKET_NAME')
s3_prefix = os.environ.get('S3_PREFIX', 'oidc-provider-logs/')

# Set the email addresses for the security team and SES sender email
security_team_email = os.environ.get('SECURITY_TEAM_EMAIL')
ses_sender_email = os.environ.get('SES_SENDER_EMAIL')

# Initialize logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # Parse the event
        event_name = event['eventName']
        request_parameters = event['requestParameters']
        url = request_parameters.get('url', '')
        account_id = event['userIdentity']['accountId']

        # Validate the OIDC issuer URL
        if not is_issuer_url_valid(url):
            logger.error(f"Invalid OIDC issuer URL: {url}")
            log_event(event)
            send_security_email(account_id, url)
            send_team_email(account_id, url)

        return {
            'statusCode': 200,
            'body': json.dumps('Validation succeeded')
        }
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps(f'Error: {str(e)}')
        }

def is_issuer_url_valid(issuer_url):
    # Implement your validation logic here
    # Return True if valid, False if invalid
    # You can check if the issuer URL matches allowed patterns

def log_event(event):
    # Log the event to an S3 bucket
    try:
        s3_key = s3_prefix + event['eventID']
        s3_client.put_object(
            Bucket=s3_bucket,
            Key=s3_key,
            Body=json.dumps(event, indent=2)
        )
    except Exception as e:
        logger.error(f"Error logging event to S3: {str(e)}")

def send_security_email(account_id, url):
    # Implement code to send email to the security team
    # You can use SES or another email service for this

def send_team_email(account_id, url):
    # Implement code to send email to the team that owns the account
    # You can use SES or another email service for this








import boto3
import json
import logging
import os

# Initialize AWS SDK clients
iam_client = boto3.client('iam')
ses_client = boto3.client('ses')

# Set the team lead email
team_lead_email = os.environ.get('TEAM_LEAD_EMAIL')

# Initialize logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # Implement logic to check if the OIDC provider has been deleted
        # You can use the IAM client to list OIDC providers and check their status

        # Example: List OIDC providers
        response = iam_client.list_open_id_connect_providers()
        oidc_providers = response.get('OpenIDConnectProviderList', [])

        # Implement your logic to check if the provider exists or has been deleted
        for provider in oidc_providers:
            # Check the status or other criteria to determine if it exists

            # If the provider still exists, send an email to the team lead
            if provider['Url'] == 'YOUR_OIDC_ISSUER_URL':
                send_team_lead_email()

        return {
            'statusCode': 200,
            'body': json.dumps('Check succeeded')
        }
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps(f'Error: {str(e)}')
        }

def send_team_lead_email():
    # Implement code to send an email to the team lead
    # You can use SES or another email service for this
    subject = "OIDC Provider Check"
    message = "The OIDC provider is still active. Please take action."
    
    try:
        response = ses_client.send_email(
            Source=team_lead_email,
            Destination={
                'ToAddresses': [team_lead_email],
            },
            Message={
                'Subject': {
                    'Data': subject,
                },
                'Body': {
                    'Text': {
                        'Data': message,
                    },
                },
            },
        )
        logger.info(f"Email sent to team lead: {response['MessageId']}")
    except Exception as e:
        logger.error(f"Error sending email to team lead: {str(e)}")

# This Lambda function should be triggered on a schedule using CloudWatch Events.






import os
import re

# Retrieve the environment variable and split it into a list
patterns_env = os.environ.get('ALLOWED_OIDC_PATTERNS', '')
patterns = patterns_env.split(',')

# OIDC issuer URL to compare
issuer_url = 'https://oidc.eks.us-west-2.amazonaws.com/id/'

# Iterate through the list of patterns
for pattern in patterns:
    if re.match(pattern, issuer_url):
        print(f"Match found for pattern: {pattern}")
        break  # Exit the loop if a match is found

# If no match is found, you can handle it here
print("No match found for any pattern.")




ALLOWED_OIDC_PATTERNS=https:\/\/oidc\.eks\..\.amazonaws\.com\/id\/,https:\/\/example\.com\/oidc





import os
import json
import boto3
import re
import logging
from botocore.exceptions import NoCredentialsError

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    # Get the expected OIDC issuer URL patterns from environment variables
    allowed_patterns = os.environ.get('ALLOWED_OIDC_PATTERNS', '').split(',')

    # Extract the OIDC issuer URL from the event
    event_body = json.loads(event['body'])
    oidc_issuer_url = event_body.get('url', '')

    # Check if the OIDC issuer URL matches any of the allowed patterns
    if any(re.match(pattern, oidc_issuer_url) for pattern in allowed_patterns):
        # The issuer URL is valid, no action needed
        return {
            'statusCode': 200,
            'body': json.dumps('Issuer URL is valid.')
        }
    else:
        # The issuer URL is not valid, send an email
        send_email(oidc_issuer_url)
        return {
            'statusCode': 400,
            'body': json.dumps('Invalid issuer URL. Email sent to team and security.')
        }

def send_email(issuer_url):
    # Create an SES client
    ses = boto3.client('ses', region_name='us-east-1')

    # Email parameters
    subject = 'Invalid OIDC Issuer URL Detected'
    body_text = f'The following OIDC issuer URL is invalid: {issuer_url}'
    body_html = f'<p>The following OIDC issuer URL is invalid: {issuer_url}</p>'
    sender_email = 'your-sender@example.com'
    recipient_emails = ['team@example.com', 'security@example.com']  # Add recipient email addresses

    try:
        # Send the email
        response = ses.send_email(
            Source=sender_email,
            Destination={'ToAddresses': recipient_emails},
            Message={
                'Subject': {'Data': subject},
                'Body': {
                    'Text': {'Data': body_text},
                    'Html': {'Data': body_html}
                }
            }
        )

        logger.info(f"Email sent successfully. Message ID: {response['MessageId']}")

    except NoCredentialsError:
        logger.error("AWS credentials not found.")
    except Exception as e:
        logger.error(f"Error sending email: {str(e)}")

if __name__ == '__main__':
    # For local testing, you can provide a sample event
    sample_event = {
        'body': json.dumps({'url': 'https://oidc.eks.amazonaws.com/id/'})
    }
    lambda_handler(sample_event, None)



import json
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # Check the event name
        event_name = event['eventName']
        if event_name not in ["CreateOpenIDConnectProvider", "UpdateOpenIDConnectProviderThumbprint"]:
            raise ValueError(f"Invalid event name: {event_name}")

        # Validate the OIDC issuer URL
        if not validate_oidc_url(event['requestParameters']['url']):
            raise ValueError("Invalid OIDC issuer URL")

        # Your logic to send email and log to S3 goes here

        return {
            'statusCode': 200,
            'body': json.dumps('Success')
        }
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps(f'Error: {str(e)}')
        }

def validate_oidc_url(url):
    # Your validation logic goes here
    # Return True if the URL is valid, otherwise return False
    pass
